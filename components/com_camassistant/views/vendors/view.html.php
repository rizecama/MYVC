<?php
/**
 * @version		1.0.0 camassistant $
 * @package		camassistant
 * @copyright	Copyright Â© 2010 - All rights reserved.
 * @license		GNU/GPL
 * @author
 * @author mail	nobody@nobody.com
 *
 *
 * @MVC architecture generated by MVC generator tool at http://www.alphaplug.com
 */

// no direct access
defined('_JEXEC') or die('Restricted access');
ini_set('upload_max_filesize', '5M');
jimport( 'joomla.application.component.view' );

class vendorsViewvendors extends Jview
{
	function display($tpl = null){
		// global $mainframe;
		$task = JRequest::getVar("task",'');
		if($task=='vendor_info')// to display vendor info form in registation process
		{
			//echo "<pre>"; print_r($_REQUEST);
			$model = $this->getModel('vendors');
			$satelist = $model->getstatelist();
			$this->assignRef('statelist',$satelist);
			$county = $model->getcountylist();
			$this->assignRef('county',$county);
			$state_link = $model->getstatelink();
			$this->assignRef('state_link',$state_link);
			$county_link = $model->getcountylink();
			$this->assignRef('county_link',$county_link);
			$industries_link = $model->getindustries_link();
			$this->assignRef('industries_link',$industries_link);
			$post	= JRequest::get('post');
			$tax_id = $post['tax_id1'].'-'.$post['tax_id2'].'-'.$post['tax_id3'];
			$company_phone = $post['phone1'].'-'.$post['phone2'].'-'.$post['phone3'];
			$alt_phone = $post['alt_phone1'].'-'.$post['alt_phone2'].'-'.$post['alt_phone3'];
			$in_house_parent_company_FEIN = $post['IH_FED1'].'-'.$post['IH_FED2'].'-'.$post['IH_FED3'];
			$this->assignRef('company_name',$post['company_name']);
			$this->assignRef('tax_id',$tax_id);
			$this->assignRef('company_address',$post['company_address']);
			$this->assignRef('city',$post['city']);
			$this->assignRef('state',$post['states']);
			$this->assignRef('zipcode',$post['zipcode']);
			$this->assignRef('established_year',$post['established_year']);
			$this->assignRef('company_phone',$company_phone);
			$this->assignRef('phone_ext',$post['phone_ext']);
			$this->assignRef('alt_phone',$alt_phone);
			$this->assignRef('alt_phone_ext',$post['alt_phone_ext']);
			$this->assignRef('in_house_vendor',$post['in_house_vendor']);
			$this->assignRef('in_house_parent_company',$post['in_house_parent_company']);
			$this->assignRef('in_house_parent_company_FEIN',$in_house_parent_company_FEIN);
			$this->setLayout('vendor_info_form');
			parent::display();
		}
		else if($task=='thanks_redirect') //to display thankyou message after vendor registration
		{
			$this->setLayout('thanks_form');
			parent::display();
		}
		else if($task=='subscriptions') //to display thankyou message after vendor registration
		{
			$model = $this->getModel('vendors');
			$promo = $model->checkcurrentpromocode();
			$this->assignRef('promo',$promo);
			$this->setLayout('subscriptions');
			parent::display();
		}
		else if($task=='vendor_available_jobs') //to display vendor billing form
		{
			$model = $this->getModel('vendors');
			$user = JFactory::getUser();
			
			$getindustryids = $model->getindustry_ids($user->id);
			if($getindustryids)
			{
			if(in_array('56',$getindustryids))
			$PLN_needed = 'yes';
			else $PLN_needed = 'no';
			}
			else
			$PLN_needed = 'no';
			$vendor_GLI_compliance_alert = $model->get_chk_vendor_GLI_compliance_alert();
			if( ($PLN_needed == 'no' && $vendor_GLI_compliance_alert['W9_exist'] != 0 && $vendor_GLI_compliance_alert['GLI_exist'] != 0) || ($PLN_needed == 'yes' && $vendor_GLI_compliance_alert['W9_exist'] != 0 && $vendor_GLI_compliance_alert['GLI_exist'] != 0 && $vendor_GLI_compliance_alert['PLN_exist'] != 0) )
			{
			$is_openjobs = $model->get_openjobs();
			}
			$Jobs = $model->get_invitation_jobs();
			$openjobs = $model->get_open_invitations();
			$Invitations = $model->get_invitation_jobs();  
            $this->assignRef('openjobs', $openjobs);
			
			$this->assignRef('Invitations', $Invitations);
			$pagination = $model->getPagination_Jobs();
			$this->assignRef('pagination', $pagination);
			$this->assignRef('Jobs',$Jobs);
			$this->setLayout('vendor_available_jobs');
			parent::display();
		}
		else if($task=='vendor_billing_centre' || $task == 'save_billing_centre') //to display vendor billing form
		{
			$model = $this->getModel('vendors');
			$billing_pledge_popup = $model->get_billing_pledge_popup();
			$enable_this_option_popup = $model->get_enable_this_option_popup();
			$ACH_ACCOUNT_popup = $model->get_ACH_ACCOUNT_popup();
			$pledge_status = $model->get_pledge_status();
			$billing_data = $model->get_billing_data();
			$rate_schedule = $model->get_rate_schedule();
			$documentation = $model->get_documentation();
			$this->assignRef('documentation',$documentation);
			$this->assignRef('rate_schedule',$rate_schedule);
			$this->assignRef('enable_this_option_popup',$enable_this_option_popup);
			$this->assignRef('ACH_ACCOUNT_popup',$ACH_ACCOUNT_popup);
			$this->assignRef('billing_data',$billing_data);
			$this->assignRef('pledge_status',$pledge_status);
			$this->assignRef('billing_pledge_popup',$billing_pledge_popup);
			$this->setLayout('vendor_billing_centre');
			parent::display();
		}
		else if($task=='billing_pledge_form')	//to upload certificates in vendor compliance documents
		{
			$model = $this->getModel('vendors');
			$this->setLayout('billing_pledge_form');
			parent::display($tpl);
		}
		else if($task=='paypal_form') //to redirect paypal url
		{
			$this->setLayout('paypal_form');
			parent::display($tpl);
		}
		else if($task=='authorize_form') //to redirect authorize  url
		{
			$this->setLayout('authorize_form');
			parent::display($tpl);
		}
		else if($task=='vendor_billing_thankyou_form')	// to display thankyou form after paying money through paypal
		{
			$this->setLayout('vendor_billing_thankyou_form');
			parent::display($tpl);
		}
		else if($task=='vendor_billing_failed_form') //to display failes message if paypal process is failed
		{
			$this->setLayout('vendor_billing_failed_form');
			parent::display($tpl);
		}
		else if($task=='industries_form')	//to display industries form in popup
		{
			$model = $this->getModel('vendors');
			$industries = $model->getindustires();
			$this->assignRef('industries',$industries);
			$this->setLayout('industries_form');
			parent::display($tpl);
		}
		else if($task=='state_form')	//to display state form in popup //coded by anandbabu
		{
			$model = $this->getModel('vendors');
			$state = $model->getstatelist();
			$this->assignRef('state',$state);
			$this->setLayout('state_form');
			parent::display($tpl);
		}
		else if($task=='county_form')	//to display county form in popup  //coded by anandbabu
		{
			$model = $this->getModel('vendors');
			$county = $model->getcountylink();
			$this->assignRef('county',$county);
			$this->setLayout('county_form');
			parent::display($tpl);
		}
		else if($task=='vendor_edit_form')	//to display vendor registration form for with auto populated values
		{
			$model = $this->getModel('vendors');
			$details = $model->getuserinfo();
			//echo '<pre>'; print_r($details); exit;
			$edit_info = $model->getedit_info();
			//echo "<pre>"; print_r($edit_info);
			$this->assignRef('result',$edit_info);
			$state = $model->getstatesforeditvendor($this->result[0]->state);
			$this->assignRef('statename',$state);
			$stateandcountyids = $model->getsselectstate($this->result[0]->user_id);
			//echo "<pre>"; print_r($stateandcountyids); exit;
			for($s=0;$s<count($stateandcountyids);$s++){
			$statenames[] = $model->getstatename($stateandcountyids[$s]->state_id);
			}
			$state_list = $model->getallstatenamewithids();
			$this->assignRef('state_list',$state_list);
			//echo "<pre>"; print_r($stateandcountyids);
			//echo "<pre>"; print_r($stateandcountyids); exit;
			for($i=0;$i<count($stateandcountyids);$i++)
			{
				//$statenames[] = $model->getstatename($stateandcountyids[0]->state_id);
				 $countynames[] = $model->getcountyname($stateandcountyids[$i]->county_id);
			}
			//echo "<pre>"; print_r($countynames);
			$this->assignRef('statenames',$statenames);
			$this->assignRef('countynames',$countynames);
			$getindustryids = $model->getindustryids($this->result[0]->user_id);

			for($i=0;$i<count($getindustryids);$i++)
			{
				$industryname[] = $model->getindustryname($getindustryids[$i]->industry_id);
			}
			$this->assignRef('industryname',$industryname);
			$user = JFactory::getUser();
			$this->assignRef('user_id',$user->id);
			$this->assignRef('details',$details[0]);
			// To get all industries
			$industries = $model->getindustires_edit(); 
			$this->assignRef('industries',$industries);
			//COmpleted
			// To get all industries
			$counties = $model->getallcounties(); 
			$this->assignRef('counties',$counties);
			//COmpleted
			$vendor_counties = $model->getvendorcounties();
			$this->assignRef('vendorcounties', $vendor_counties);
			$businessstatelist = $model->getbusinessstatelist();
			$this->assignRef('businesslist',$businessstatelist);
			
			$this->setLayout('vendor_edit_form');
			parent::display($tpl);
		}
		else if($task=='mail_redirect_form') // to display form after sending mail
		{
			$this->setLayout('mail_redirect_form');
			parent::display($tpl);
		}
		
		else if($task=='vendor_proposal_centre') // to list all types of vendor's bidding proposals upon login
		{

			$model = $this->getModel('vendors');
			$Prp_bids = $model->get_RFP_Maxbids();
			$vendor_proposal_summary = $model->get_vendor_proposal_summary();
			$this->assignRef('Prp_bids',$Prp_bids);
			$this->assignRef('prp_Draft_summary',$vendor_proposal_summary[0]);
			$this->assignRef('prp_Submitted_summary',$vendor_proposal_summary[1]);
			$this->assignRef('prp_Awarded_summary',$vendor_proposal_summary[2]);
			$this->assignRef('prp_Unawarded_summary',$vendor_proposal_summary[3]);
			$this->assignRef('prp_Review_summary',$vendor_proposal_summary[4]);
			$this->setLayout('vendor_proposal_centre');
			parent::display($tpl);
		}
		else if($task == 'not_authorized')
		{
			$this->setLayout('not_authorized');
			parent::display($tpl);
		}
		else if($task == 'viewall_proposals')
		{
			$model = $this->getModel('vendors');
			$Prp_type = JRequest::getVar('Prp_type','');
			$viewall_proposals = $model->get_limit_records($Prp_type);
			//echo  count($viewall_proposals);
			$pagination = $model->getPagination($Prp_type);
			$this->assignRef('pagination', $pagination);
			$this->assignRef('viewall_proposals',$viewall_proposals);
			$this->setLayout('viewall_proposals');
			parent::display($tpl);
		}

/* Start -- Awarded Proposals */

		else if($task == 'vendor_awarded_proposals')
		{
			$model = $this->getModel('vendors');
			$RFPinfo = $model->get_RFPinfo();
			$this->assignRef('RFPinfo', $RFPinfo[0]);
			$BIDinfo = $model->get_Bidamount_infor();
			$this->assignRef('BIDinfo', $BIDinfo[0]);
			$BiddedVendorsInfo = $model->get_Bidded_vendors_infor();
			$this->assignRef('BiddedVendorsInfo', $BiddedVendorsInfo);
			//for Alt
			$Alt_BiddedVendorsInfo = $model->get_Alt_Bidded_vendors_infor();
			$this->assignRef('Alt_BiddedVendorsInfo', $Alt_BiddedVendorsInfo);
			//for second page in pdf
			$TASKS_summary = $model->get_TASKS_summary();
			$this->assignRef('TASKS_summary', $TASKS_summary);
			//for Alt
			$Alt_TASKS_summary = $model->get_Alt_TASKS_summary();
			$this->assignRef('Alt_TASKS_summary', $Alt_TASKS_summary);
			//for Alt
			$Alt_NOTES_summary = $model->get_Alt_NOTES_summary();
			$this->assignRef('Alt_NOTES_summary', $Alt_NOTES_summary);

			$DOCS_summary = $model->get_DOCS_summary();
			$this->assignRef('DOCS_summary', $DOCS_summary);
			//for third page in pdf
			$NOTES_summary = $model->get_NOTES_summary();
			$this->assignRef('NOTES_summary', $NOTES_summary);

			$EXCEPTION_summary = $model->get_EXCEPTION_summary();
			$this->assignRef('EXCEPTION_summary', $EXCEPTION_summary);
			//for Alt
			$Alt_EXCEPTION_summary = $model->get_Alt_EXCEPTION_summary();
			$this->assignRef('Alt_EXCEPTION_summary', $Alt_EXCEPTION_summary);
			//for 4th page in pdf
			$vendors_cnt = $model->get_vendors_cnt_award();
			$this->assignRef('vendors_cnt', $vendors_cnt);
			$RFP_NOTES_summary = $model->get_rfpcreator_tasks();
			$this->assignRef('RFP_NOTES_summary', $RFP_NOTES_summary);
			//echo "<pre>"; print_r($RFP_NOTES_summary); exit;
			//function to get RFP special Requirements details
			$SPLReq_Category = $model->get_SPLReq_Category();
			$this->assignRef('SPLReq_Category',$SPLReq_Category);

			//function to get RFP special Requirements details
			$SPLRequirements_details = $model->get_SPLRequirements();
			$this->assignRef('SPLRequirements_details',$SPLRequirements_details);

			$Review_reqCatList=$model->get_Review_SplRequiremntCats();
			$this->assignRef('Review_reqCatList',$Review_reqCatList);

			//for third page in pdf
			$COM_docs_summary = $model->get_COM_docs_summary();
			$this->assignRef('COM_docs_summary', $COM_docs_summary);
			$COM_docs_summary_new = $model->get_COM_docs_summary_new();
			$this->assignRef('COM_docs_summary_new', $COM_docs_summary_new);
			//echo "<pre>"; print_r($TASKS_summary); exit;
			
			$general_special = $model->getgenerallibilities();
			$this->assignRef('generalinfo', $general_special);
			$auto_special = $model->getautolibilities();
			$this->assignRef('autoinfo', $auto_special);
			$workers_special = $model->getworkerslibilities();
			$this->assignRef('workersinfo', $workers_special);
			$umb_special = $model->getumblibilities();
			$this->assignRef('umbinfo', $umb_special);
			$lic_special = $model->getliclibilities();
			$this->assignRef('licinfo', $lic_special);
			
			if($RFPinfo[0]->jobtype == 'yes'){
			$bascifiles = $model->basicuploadedfiles();
			$this->assignRef('bascifiles', $bascifiles);
			}
			
			if($RFPinfo[0]->jobtype == 'yes')
			$this->setLayout('vendor_awarded_proposals_basic');
			else
			$this->setLayout('vendor_awarded_proposals');
			parent::display($tpl);
		}

		else if($task == 'vendor_download_awarded_proposals')
		{
			$model = $this->getModel('vendors');
			$RFPinfo = $model->get_RFPinfo();
			$this->assignRef('RFPinfo', $RFPinfo[0]);
			$BIDinfo = $model->get_Bidamount_infor();
			$this->assignRef('BIDinfo', $BIDinfo[0]);
			$BiddedVendorsInfo = $model->get_Bidded_vendors_infor();
			$this->assignRef('BiddedVendorsInfo', $BiddedVendorsInfo);
			//for Alt
			$Alt_BiddedVendorsInfo = $model->get_Alt_Bidded_vendors_infor();
			$this->assignRef('Alt_BiddedVendorsInfo', $Alt_BiddedVendorsInfo);
			//for second page in pdf
			$TASKS_summary = $model->get_TASKS_summary();
			$this->assignRef('TASKS_summary', $TASKS_summary);
			//for Alt
			$Alt_TASKS_summary = $model->get_Alt_TASKS_summary();
			$this->assignRef('Alt_TASKS_summary', $Alt_TASKS_summary);
			//for Alt
			$Alt_NOTES_summary = $model->get_Alt_NOTES_summary();
			$this->assignRef('Alt_NOTES_summary', $Alt_NOTES_summary);
			
			$DOCS_summary = $model->get_DOCS_summary();
			$this->assignRef('DOCS_summary', $DOCS_summary);
			//for third page in pdf
			$NOTES_summary = $model->get_NOTES_summary();
			$this->assignRef('NOTES_summary', $NOTES_summary);

			$EXCEPTION_summary = $model->get_EXCEPTION_summary();
			$this->assignRef('EXCEPTION_summary', $EXCEPTION_summary);
			//for Alt
			$Alt_EXCEPTION_summary = $model->get_Alt_EXCEPTION_summary();
			$this->assignRef('Alt_EXCEPTION_summary', $Alt_EXCEPTION_summary);
			//for 4th page in pdf
			$vendors_cnt = $model->get_vendors_cnt_award();
			$this->assignRef('vendors_cnt', $vendors_cnt);
			$RFP_NOTES_summary = $model->get_rfpcreator_tasks();
			$this->assignRef('RFP_NOTES_summary', $RFP_NOTES_summary);
			//echo "<pre>"; print_r($RFP_NOTES_summary); exit;
			//function to get RFP special Requirements details
			$SPLReq_Category = $model->get_SPLReq_Category();
			$this->assignRef('SPLReq_Category',$SPLReq_Category);

			//function to get RFP special Requirements details
			$SPLRequirements_details = $model->get_SPLRequirements();
			$this->assignRef('SPLRequirements_details',$SPLRequirements_details);

			$Review_reqCatList=$model->get_Review_SplRequiremntCats();
			$this->assignRef('Review_reqCatList',$Review_reqCatList);

			//for third page in pdf
			$COM_docs_summary = $model->get_COM_docs_summary();
			$this->assignRef('COM_docs_summary', $COM_docs_summary);
			$COM_docs_summary_new = $model->get_COM_docs_summary_new();
			$this->assignRef('COM_docs_summary_new', $COM_docs_summary_new);
			//echo "<pre>"; print_r($TASKS_summary); exit;
			
			$general_special = $model->getgenerallibilities();
			$this->assignRef('generalinfo', $general_special);
			$auto_special = $model->getautolibilities();
			$this->assignRef('autoinfo', $auto_special);
			$workers_special = $model->getworkerslibilities();
			$this->assignRef('workersinfo', $workers_special);
			$umb_special = $model->getumblibilities();
			$this->assignRef('umbinfo', $umb_special);
			$lic_special = $model->getliclibilities();
			$this->assignRef('licinfo', $lic_special);
			
			if($RFPinfo[0]->jobtype == 'yes'){
			$bascifiles = $model->basicuploadedfiles();
			$this->assignRef('bascifiles', $bascifiles);
			}
			
			if($RFPinfo[0]->jobtype == 'yes')
			$this->setLayout('vendor_download_awarded_proposals_basic');
			else
			$this->setLayout('vendor_download_awarded_proposals');
			parent::display($tpl);
		}

/* End -- Awarded Proposals */

		else if($task == 'vendor_proposals_summary')
		{
			$model = $this->getModel('vendors');
			$RFPinfo = $model->get_RFPinfo();
			$this->assignRef('RFPinfo', $RFPinfo[0]);
			$BIDinfo = $model->get_Bidamount_info();
			$this->assignRef('BIDinfo', $BIDinfo[0]);
			$BiddedVendorsInfo = $model->get_Bidded_vendors_info();
			$this->assignRef('BiddedVendorsInfo', $BiddedVendorsInfo);
			//for Alt
			$Alt_BiddedVendorsInfo = $model->get_Alt_Bidded_vendors_info();
			$this->assignRef('Alt_BiddedVendorsInfo', $Alt_BiddedVendorsInfo);
			//for second page in pdf
			$TASKS_summary = $model->get_TASKS_summary();
			$this->assignRef('TASKS_summary', $TASKS_summary);
			//for Alt
			$Alt_TASKS_summary = $model->get_Alt_TASKS_summary();
			$this->assignRef('Alt_TASKS_summary', $Alt_TASKS_summary);
			//for Alt
			$Alt_NOTES_summary = $model->get_Alt_NOTES_summary();
			$this->assignRef('Alt_NOTES_summary', $Alt_NOTES_summary);

			$DOCS_summary = $model->get_DOCS_summary();
			$this->assignRef('DOCS_summary', $DOCS_summary);
			//for third page in pdf
			$NOTES_summary = $model->get_NOTES_summary();
			$this->assignRef('NOTES_summary', $NOTES_summary);

			$EXCEPTION_summary = $model->get_EXCEPTION_summary();
			$this->assignRef('EXCEPTION_summary', $EXCEPTION_summary);
			//for Alt
			$Alt_EXCEPTION_summary = $model->get_Alt_EXCEPTION_summary();
			$this->assignRef('Alt_EXCEPTION_summary', $Alt_EXCEPTION_summary);
			//for 4th page in pdf
			$vendors_cnt = $model->get_vendors_cnt();
			$this->assignRef('vendors_cnt', $vendors_cnt);
			$RFP_NOTES_summary = $model->get_rfpcreator_tasks();
			$this->assignRef('RFP_NOTES_summary', $RFP_NOTES_summary);
			//echo "<pre>"; print_r($RFP_NOTES_summary); exit;
			//function to get RFP special Requirements details
			$SPLReq_Category = $model->get_SPLReq_Category();
			$this->assignRef('SPLReq_Category',$SPLReq_Category);

			//function to get RFP special Requirements details
			$SPLRequirements_details = $model->get_SPLRequirements();
			$this->assignRef('SPLRequirements_details',$SPLRequirements_details);

			$Review_reqCatList=$model->get_Review_SplRequiremntCats();
			$this->assignRef('Review_reqCatList',$Review_reqCatList);

			//for third page in pdf
			$COM_docs_summary = $model->get_COM_docs_summary();
			$COM_docs_summary_new = $model->get_COM_docs_summary_new();
			$this->assignRef('COM_docs_summary_new', $COM_docs_summary_new);
			$this->assignRef('COM_docs_summary', $COM_docs_summary);
			//echo "<pre>"; print_r($TASKS_summary); exit;
			
			$general_special = $model->getgenerallibilities();
			$this->assignRef('generalinfo', $general_special);
			$auto_special = $model->getautolibilities();
			$this->assignRef('autoinfo', $auto_special);
			$workers_special = $model->getworkerslibilities();
			$this->assignRef('workersinfo', $workers_special);
			$umb_special = $model->getumblibilities();
			$this->assignRef('umbinfo', $umb_special);
			$lic_special = $model->getliclibilities();
			$this->assignRef('licinfo', $lic_special);
			$omi_special = $model->getomilibilities();
			$this->assignRef('omiinfo', $omi_special);
			
			if($RFPinfo[0]->jobtype == 'yes'){
			$bascifiles = $model->basicuploadedfiles();
			$this->assignRef('bascifiles', $bascifiles);
			}
			
			if($RFPinfo[0]->jobtype == 'yes')
			$this->setLayout('vendor_proposals_summary_basic');
			else
			$this->setLayout('vendor_proposals_summary');
			parent::display($tpl);
		}

		else if($task == 'vendor_download_proposals_summary')
		{
			$model = $this->getModel('vendors');
			$RFPinfo = $model->get_RFPinfo();
			$this->assignRef('RFPinfo', $RFPinfo[0]);
			$BIDinfo = $model->get_Bidamount_info();
			$this->assignRef('BIDinfo', $BIDinfo[0]);
			$BiddedVendorsInfo = $model->get_Bidded_vendors_info();
			$this->assignRef('BiddedVendorsInfo', $BiddedVendorsInfo);
			//for Alt
			$Alt_BiddedVendorsInfo = $model->get_Alt_Bidded_vendors_info();
			$this->assignRef('Alt_BiddedVendorsInfo', $Alt_BiddedVendorsInfo);
			//for second page in pdf
			$TASKS_summary = $model->get_TASKS_summary();
			$this->assignRef('TASKS_summary', $TASKS_summary);
			//for Alt
			$Alt_TASKS_summary = $model->get_Alt_TASKS_summary();
			$this->assignRef('Alt_TASKS_summary', $Alt_TASKS_summary);
			//for Alt
			$Alt_NOTES_summary = $model->get_Alt_NOTES_summary();
			$this->assignRef('Alt_NOTES_summary', $Alt_NOTES_summary);

			$DOCS_summary = $model->get_DOCS_summary();
			$this->assignRef('DOCS_summary', $DOCS_summary);
			//for third page in pdf
			$NOTES_summary = $model->get_NOTES_summary();
			$this->assignRef('NOTES_summary', $NOTES_summary);

			$EXCEPTION_summary = $model->get_EXCEPTION_summary();
			$this->assignRef('EXCEPTION_summary', $EXCEPTION_summary);
			//for Alt
			$Alt_EXCEPTION_summary = $model->get_Alt_EXCEPTION_summary();
			$this->assignRef('Alt_EXCEPTION_summary', $Alt_EXCEPTION_summary);
			//for 4th page in pdf
			$vendors_cnt = $model->get_vendors_cnt();
			$this->assignRef('vendors_cnt', $vendors_cnt);
			$RFP_NOTES_summary = $model->get_rfpcreator_tasks();
			$this->assignRef('RFP_NOTES_summary', $RFP_NOTES_summary);
			//echo "<pre>"; print_r($RFP_NOTES_summary); exit;
			//function to get RFP special Requirements details
			$SPLReq_Category = $model->get_SPLReq_Category();
			$this->assignRef('SPLReq_Category',$SPLReq_Category);

			//function to get RFP special Requirements details
			$SPLRequirements_details = $model->get_SPLRequirements();
			$this->assignRef('SPLRequirements_details',$SPLRequirements_details);

			$Review_reqCatList=$model->get_Review_SplRequiremntCats();
			$this->assignRef('Review_reqCatList',$Review_reqCatList);

			//for third page in pdf
			$COM_docs_summary = $model->get_COM_docs_summary();
			$this->assignRef('COM_docs_summary', $COM_docs_summary);
			$COM_docs_summary_new = $model->get_COM_docs_summary_new();
			$this->assignRef('COM_docs_summary_new', $COM_docs_summary_new);
			//echo "<pre>"; print_r($TASKS_summary); exit;
			
			$general_special = $model->getgenerallibilities();
			$this->assignRef('generalinfo', $general_special);
			$auto_special = $model->getautolibilities();
			$this->assignRef('autoinfo', $auto_special);
			$workers_special = $model->getworkerslibilities();
			$this->assignRef('workersinfo', $workers_special);
			$umb_special = $model->getumblibilities();
			$this->assignRef('umbinfo', $umb_special);
			$lic_special = $model->getliclibilities();
			$this->assignRef('licinfo', $lic_special);
			
			$omi_special = $model->getomilibilities();
			$this->assignRef('omiinfo', $omi_special);
			
			if($RFPinfo[0]->jobtype == 'yes'){
			$bascifiles = $model->basicuploadedfiles();
			$this->assignRef('bascifiles', $bascifiles);
			}
			
			if($RFPinfo[0]->jobtype == 'yes')
			$this->setLayout('vendor_download_proposals_summary_basic');
			else
			$this->setLayout('vendor_download_proposals_summary');
			parent::display($tpl);
		}

		else if($task == 'vendor_view_proposals_summary')
		{
			$model = $this->getModel('vendors');
			$RFPinfo = $model->get_RFPinfo();
			$this->assignRef('RFPinfo', $RFPinfo[0]);
			$BIDinfo = $model->get_Bidamount_info();
			$this->assignRef('BIDinfo', $BIDinfo[0]);
			$BiddedVendorsInfo = $model->get_Bidded_vendors_info();
			$this->assignRef('BiddedVendorsInfo', $BiddedVendorsInfo);

			//for second page in pdf
			$TASKS_summary = $model->get_TASKS_summary();
			$this->assignRef('TASKS_summary', $TASKS_summary);

			$DOCS_summary = $model->get_DOCS_summary();
			$this->assignRef('DOCS_summary', $DOCS_summary);
			//for third page in pdf
			$NOTES_summary = $model->get_NOTES_summary();
			$this->assignRef('NOTES_summary', $NOTES_summary);
			//for Alt

			$EXCEPTION_summary = $model->get_EXCEPTION_summary();
			$this->assignRef('EXCEPTION_summary', $EXCEPTION_summary);

			//for 4th page in pdf
			$vendors_cnt = $model->get_vendors_cnt();
			$this->assignRef('vendors_cnt', $vendors_cnt);
			$RFP_NOTES_summary = $model->get_rfpcreator_tasks();
			$this->assignRef('RFP_NOTES_summary', $RFP_NOTES_summary);
			//echo "<pre>"; print_r($RFP_NOTES_summary); exit;
			//function to get RFP special Requirements details
			$SPLReq_Category = $model->get_SPLReq_Category();
			$this->assignRef('SPLReq_Category',$SPLReq_Category);

			//function to get RFP special Requirements details
			$SPLRequirements_details = $model->get_SPLRequirements();
			$this->assignRef('SPLRequirements_details',$SPLRequirements_details);
			//echo "<pre>"; print_r($TASKS_summary); exit;
			$this->setLayout('vendor_view_proposals_summary');
			parent::display($tpl);
		}
		else if($task == 'vendor_proposals_tasks_summary')
		{
			$model = $this->getModel('vendors');
			$RFPinfo = $model->get_RFPinfo();
			$this->assignRef('RFPinfo', $RFPinfo[0]);
			$BIDinfo = $model->get_Bidamount_info();
			$this->assignRef('BIDinfo', $BIDinfo[0]);
			$BiddedVendorsInfo = $model->get_Bidded_vendors_info();
			$this->assignRef('BiddedVendorsInfo', $BiddedVendorsInfo);
			$TASKS_summary = $model->get_TASKS_summary();
			$this->assignRef('TASKS_summary', $TASKS_summary);
			$DOCS_summary = $model->get_DOCS_summary();
			$this->assignRef('DOCS_summary', $DOCS_summary);
			$this->setLayout('vendor_proposals_tasks_summary');
			parent::display($tpl);
		}
		else if($task == 'vendor_proposals_notes_summary')
		{
			$model = $this->getModel('vendors');
			$RFPinfo = $model->get_RFPinfo();
			$this->assignRef('RFPinfo', $RFPinfo[0]);
			$BiddedVendorsInfo = $model->get_Bidded_vendors_info();
			$this->assignRef('BiddedVendorsInfo', $BiddedVendorsInfo);
			$NOTES_summary = $model->get_NOTES_summary();
			$this->assignRef('NOTES_summary', $NOTES_summary);
			$EXCEPTION_summary = $model->get_EXCEPTION_summary();
			$this->assignRef('EXCEPTION_summary', $EXCEPTION_summary);
			$this->setLayout('vendor_proposals_notes_summary');
			parent::display($tpl);
		}
		else if($task == 'vendor_proposals_rfp_tasks_summary')
		{
			$model = $this->getModel('vendors');

			$vendors_cnt = $model->get_vendors_cnt();
			$this->assignRef('vendors_cnt', $vendors_cnt);
			$RFPinfo = $model->get_RFPinfo();
			$this->assignRef('RFPinfo', $RFPinfo[0]);
			$BiddedVendorsInfo = $model->get_Bidded_vendors_info();
			$this->assignRef('BiddedVendorsInfo', $BiddedVendorsInfo);
			$NOTES_summary = $model->get_rfpcreator_tasks();
			$this->assignRef('NOTES_summary', $NOTES_summary);
			//function to get RFP special Requirements details
			$SPLReq_Category = $model->get_SPLReq_Category();
			$this->assignRef('SPLReq_Category',$SPLReq_Category);

			//function to get RFP special Requirements details
			$SPLRequirements_details = $model->get_SPLRequirements();
			$this->assignRef('SPLRequirements_details',$SPLRequirements_details);
			$this->setLayout('vendor_proposals_rfp_tasks_summary');
			parent::display($tpl);
		}
		else if($task == 'vendor_dashboard')
		{
			$model = $this->getModel('vendors');
			$user = JFactory::getUser();
			$vendor_GLI_compliance_alert = $model->get_chk_vendor_GLI_compliance_alert();
			$getindustryids = $model->getindustry_ids($user->id);
			if($getindustryids)
			{
			if(in_array('56',$getindustryids))
			$PLN_needed = 'yes';
			else $PLN_needed = 'no';
			}
			else
			$PLN_needed = 'no';
			if( ($PLN_needed == 'no' && $vendor_GLI_compliance_alert['W9_exist'] != 0 && $vendor_GLI_compliance_alert['GLI_exist'] != 0) || ($PLN_needed == 'yes' && $vendor_GLI_compliance_alert['W9_exist'] != 0 && $vendor_GLI_compliance_alert['GLI_exist'] != 0 && $vendor_GLI_compliance_alert['PLN_exist'] != 0) )
			{
			//echo 'anand';
			$is_openjobs = $model->get_openjobs();
			}
			$Jobs = $model->get_available_jobs();
			$openjobs = $model->get_open_invitations();
			$personal_requests = $model->personalrequests();  
            $this->assignRef('personalrequests', $personal_requests);
//			echo "<pre>"; print_r($Jobs); exit;
			//To get the invitation jobs
			$Invitations = $model->get_invitation_jobs();  
			$this->assignRef('Invitations', $Invitations);
			//Completed
			$announcement = $model->getannouncement();
			//$getopenjobs = $model->getopenjobs();
			$pagination = $model->getPagination_Jobs();
			$this->assignRef('PLN_needed',$PLN_needed);
			$this->assignRef('pagination', $pagination);
		    $this->assignRef('vendor_GLI_compliance_alert', $vendor_GLI_compliance_alert);
			$this->assignRef('Jobs', $Jobs);
			$this->assignRef('openjobs', $openjobs);
			$this->assignRef('announcement', $announcement);
			//$this->assignRef('openjobs', $getopenjobs);
			//For proposal center home details
			$Prp_bids = $model->get_RFP_Maxbids();
			$vendor_proposal_summary = $model->get_vendor_proposal_summary_dashboard();
            // echo '<pre>'; print_r($vendor_proposal_summary);
			$this->assignRef('Prp_bids',$Prp_bids);
			$this->assignRef('prp_Draft_summary',$vendor_proposal_summary[0]);
			$this->assignRef('prp_Submitted_summary',$vendor_proposal_summary[1]);
			$Prp_type = 'Awarded';
			$viewall_proposals = $model->get_limit_records($Prp_type);
			$this->assignRef('viewall_proposals',$viewall_proposals);
			
			$expireddocs = $model->expireddocuments($Prp_type);
			
			$this->assignRef('expireddocs',$expireddocs);
			$noncompanies = $model->getnoncompcount($Prp_type);
			$this->assignRef('noncompanies',$noncompanies);
			
			//Completed
			$this->setLayout('vendor_dashboard');
			parent::display($tpl);
		}
		
		else if($task == 'vendor_compliance_docs') //to display compliance form
		{
			$model = $this->getModel('vendors');
			$user = JFactory::getUser();
			$GLI_policy_configurations = $model->get_GLI_policy_configurations();
			$this->assignRef('GLI_policy_configurations',$GLI_policy_configurations);
			$liscense_categories = $model->get_liscense_categories();
			$this->assignRef('liscense_categories',$liscense_categories);
			$W9_data = $model->get_compliance_W9_data();
			//echo '<pre>'; print_r($W9_data);
			if(count($W9_data)>0)
			//echo '<pre>'; print_r($W9_data);
			$this->assignRef('W9_data',$W9_data[0]);
			$WCI_data = $model->get_compliance_WCI_data();
			if(count($WCI_data)>0)
			$this->assignRef('WCI_data',$WCI_data);
			
			$OMI_data = $model->get_compliance_OMI_data();
			if(count($OMI_data)>0)
			$this->assignRef('OMI_data',$OMI_data);
			
			
            $WC_data = $model->get_compliance_WC_data();
			$AIP_data = $model->get_compliance_AIP_data();
             if(count($AIP_data)>0)
			$this->assignRef('AIP_data',$AIP_data);
			
			if(count($WC_data)>0)
			$this->assignRef('WC_data',$WC_data);
			$GLI_data = $model->get_compliance_GLI_data();
			$this->assignRef('GLI_data',$GLI_data);
			$OLN_data = $model->get_compliance_OLN_data();
			$this->assignRef('OLN_data',$OLN_data);
			$PLN_data = $model->get_compliance_PLN_data();
			$this->assignRef('PLN_data',$PLN_data);
			$UMB_data = $model->get_compliance_UMB_data();
			$this->assignRef('UMB_data',$UMB_data);
			$states = $model->get_edit_compliance_states();
			$this->assignRef('states',$states);
			$OLN_states = $model->get_compliances_OLN_states();
			$this->assignRef('OLN_states',$OLN_states);
			$PLN_states = $model->get_compliances_PLN_states();
			$this->assignRef('PLN_states',$PLN_states);
			$W9_upld_cert_link = $model->get_W9_upld_cert_link();
			$this->assignRef('W9_upld_cert_link',$W9_upld_cert_link);
			$GLI_upld_cert_link = $model->get_GLI_upld_cert_link();
			$this->assignRef('GLI_upld_cert_link',$GLI_upld_cert_link);
			$WCI_upld_cert_link = $model->get_WCI_upld_cert_link();
			$this->assignRef('WCI_upld_cert_link',$WCI_upld_cert_link);
			$OMI_upld_cert_link = $model->get_OMI_upld_cert_link();
			$this->assignRef('OMI_upld_cert_link',$OMI_upld_cert_link);
			$OLN_upld_cert_link = $model->get_OLN_upld_cert_link();
			$this->assignRef('OLN_upld_cert_link',$OLN_upld_cert_link);
			$PLN_upld_cert_link = $model->get_PLN_upld_cert_link();
			$this->assignRef('PLN_upld_cert_link',$PLN_upld_cert_link);
			$firmslist = $model->getpreferredclist();
			$this->assignRef('firmslist',$firmslist);
			$getindustryids = $model->getindustry_ids($user->id);
			if($getindustryids)
			if(in_array('56',$getindustryids))
			$PLN_needed = 'yes'; else $PLN_needed = 'no';
			$this->assignRef('PLN_needed',$PLN_needed);
			$first = JRequest::getVar('first','');
			//if(count($GLI_data)>0)
			if($first != 'new' && (count($GLI_data)>0 || count($W9_data)>0) )
			$this->setLayout('vendor_compliance_docs_edit');
			else
			//$this->setLayout('vendor_compliance_docs');
                         $this->setLayout('vendor_compliance_docs_edit');
			parent::display($tpl);
		}
		 else if($task == 'upload_select')
		{
			$this->setLayout('task_uploadfile_form');
                        parent::display();
		}
		else if($task == 'ajax_compliance_OLN_form') //Ajax form to "Add another ocupational lincese" - in compliance form
		{
			$compliance = JRequest::getVar('compliance','');
			$model = $this->getModel('vendors');
			$states = $model->get_compliances_OLN_states();
			$this->assignRef('states',$states);
			$OLN_upld_cert_link = $model->get_OLN_upld_cert_link($compliance);
			$this->assignRef('OLN_upld_cert_link',$OLN_upld_cert_link);
			$this->setLayout('ajax_compliance_oln_form');
			parent::display($tpl);
		}
		else if($task == 'ajax_compliance_PLN_form') //Ajax form to "Add another ocupational lincese" - in compliance form
		{
			$compliance = JRequest::getVar('compliance','');
			$model = $this->getModel('vendors');
			$liscense_categories = $model->get_liscense_categories();
			$this->assignRef('liscense_categories',$liscense_categories);
			$states = $model->get_compliances_PLN_states();
			$this->assignRef('states',$states);
			$PLN_upld_cert_link = $model->get_PLN_upld_cert_link($compliance);
			$this->assignRef('PLN_upld_cert_link',$PLN_upld_cert_link);
			$this->setLayout('ajax_compliance_pln_form');
			parent::display($tpl);
		}
		else if($task == 'ajax_compliance_gli_form') //Ajax form to "Add another Gnaeneral liability insurance" - in compliance form
		{
			$compliance = JRequest::getVar('compliance','');
			$model = $this->getModel('vendors');
			$this->setLayout('ajax_compliance_gli_form');
			parent::display($tpl);
		}
		else if($task == 'ajax_compliance_wci_form') //Ajax form to "Add another General liability insurance" - in compliance form
		{
			$compliance = JRequest::getVar('compliance','');
			$model = $this->getModel('vendors');
			$this->setLayout('ajax_compliance_wci_form');
			parent::display($tpl);
		}
		else if($task == 'ajax_compliance_wc_form') //Ajax form to "Add another General liability insurance" - in compliance form
		{
			$compliance = JRequest::getVar('compliance','');
			$model = $this->getModel('vendors');
			$this->setLayout('ajax_compliance_wc_form');
			parent::display($tpl);
		}
		else if($task == 'ajax_compliance_aip_form') //Ajax form to "Add another General liability insurance" - in compliance form
		{
			$compliance = JRequest::getVar('compliance','');
			$model = $this->getModel('vendors');
			$this->setLayout('ajax_compliance_aip_form');
			parent::display($tpl);
		}
		else if($task == 'ajax_compliance_UMB_form') //Ajax form to "Add another Umbrella liability insurance" - in compliance form
		{
			$compliance = JRequest::getVar('compliance','');
			$model = $this->getModel('vendors');
			$this->setLayout('ajax_compliance_umb_form');
			parent::display($tpl);
		}
		else if($task == 'ajax_compliance_omi_form') //Ajax form to "Add another General liability insurance" - in compliance form
		{
			$compliance = JRequest::getVar('compliance','');
			$model = $this->getModel('vendors');
			$this->setLayout('ajax_compliance_omi_form');
			parent::display($tpl);
		}
		else if($task=='compliance_upload_form')	//to upload certificates in vendor compliance documents
		{
			$model = $this->getModel('vendors');
			//$industries = $model->getindustires();
			//$this->assignRef('industries',$industries);
			$this->setLayout('compliance_upload_form');
			parent::display($tpl);
		}

		else if($task=='get_subcat')
		{
			$this->setLayout('ajax_get_subcat');
			parent::display($tpl);
		}
			else if($task == 'pdfcron'){

	$today = date('Y-m-d h:i');
	$db =& JFactory::getDBO();
	$result = "SELECT * FROM #__cam_rfpinfo where rfp_type!='closed'";
	$db->setQuery($result);
	$db->query();
	$content = $db->loadObjectList();

	foreach($content as $row)
	{
	$closetime =  $row->proposalDueDate . " " . $row->proposalDueTime;
	// print_r( $closetime); echo "<br><br>";
	$date= str_replace('PM','',$closetime);
	$date1= str_replace('AM','',$date);
	$date2= explode('-',$date1);
	$date= $date2[1];
	$month= $date2[0];
	$year1= $date2[2];
	$year2= explode(' ',$year1);
	$year = $year2[0];
	$time = $year2[1];
	$date3= $year.'-'.$month.'-'.$date.' '.$time;
	$closeddate= strtotime($date3);
	$today = date('Y-m-d h:i');
	$todatdate= strtotime($today);

	if($todatdate >= $closeddate){
 	//$sql_update = "UPDATE #__cam_rfpinfo SET rfp_type  = 'closed' WHERE id= ".$row->id." AND rfp_type='rfp' ";
	//$result1 = $db->Query($sql_update);
	if($result1){

	$this->generating_pdf($row->id);
	 }
	}
	}

		}
		
		else if($task == 'vendordetailslayout') //to display compliance form
		{
			$model = $this->getModel('vendors');
			$user = JRequest::getVar('id','');
			$userl =& JFactory::getUser();
			if(!$user) { 
			$user = $userl->id ;
			 } 
			 else{
			$user = $user ; 
			 }
			$GLI_policy_configurations = $model->get_GLI_policy_configurations();
			$this->assignRef('GLI_policy_configurations',$GLI_policy_configurations);
			$liscense_categories = $model->get_liscense_categories();
			$this->assignRef('liscense_categories',$liscense_categories);
			$W9_data = $model->get_compliance_W9_datav($user);
			if(count($W9_data)>0)
			$this->assignRef('W9_data',$W9_data[0]);
			$WCI_data = $model->get_compliance_WCI_datav($user);
			if(count($WCI_data)>0)
			$this->assignRef('WCI_data',$WCI_data);
			$AIP_data = $model->get_compliance_AIP_datav($user);
             if(count($AIP_data)>0)
			$this->assignRef('AIP_data',$AIP_data);
            $WC_data = $model->get_compliance_WC_datav($user);
			if(count($WC_data)>0)
			$this->assignRef('WC_data',$WC_data);
			$GLI_data = $model->get_compliance_GLI_datav($user);
			$this->assignRef('GLI_data',$GLI_data);
			$UMB_data = $model->get_compliance_UMB_datav($user);
			$this->assignRef('UMB_data',$UMB_data);
			
			$OMI_data = $model->get_compliance_OMI_datav($user);
			$this->assignRef('OMI_data',$OMI_data);
			
			$OLN_data = $model->get_compliance_OLN_datav($user);
			$this->assignRef('OLN_data',$OLN_data);
			$PLN_data = $model->get_compliance_PLN_datav($user);
			$this->assignRef('PLN_data',$PLN_data);
			$states = $model->get_edit_compliance_statesv();
			$this->assignRef('states',$states);
			$OLN_states = $model->get_compliances_OLN_statesv();
			$this->assignRef('OLN_states',$OLN_states);
			$PLN_states = $model->get_compliances_PLN_statesv();
			$this->assignRef('PLN_states',$PLN_states);
			$W9_upld_cert_link = $model->get_W9_upld_cert_linkv();
			$this->assignRef('W9_upld_cert_link',$W9_upld_cert_link);
			$GLI_upld_cert_link = $model->get_GLI_upld_cert_linkv();
			$this->assignRef('GLI_upld_cert_link',$GLI_upld_cert_link);
			$WCI_upld_cert_link = $model->get_WCI_upld_cert_linkv();
			$this->assignRef('WCI_upld_cert_link',$WCI_upld_cert_link);
			$OLN_upld_cert_link = $model->get_OLN_upld_cert_linkv();
			$this->assignRef('OLN_upld_cert_link',$OLN_upld_cert_link);
			$PLN_upld_cert_link = $model->get_PLN_upld_cert_linkv();
			$this->assignRef('PLN_upld_cert_link',$PLN_upld_cert_link);
			$ven_data = $model->getvendorinformation($user);
			$this->assignRef('vendata',$ven_data);
			$getindustryids = $model->getindustry_ids($user);
			$usersub = $model->get_usersubscribe($user);
			$this->assignRef('subscription_user',$usersub);
			$aboutus = $model->getaboutus($user);
			$this->assignRef('aboutus',$aboutus);
			$rfps = $model->getvendorreviews($user);
			$this->assignRef('rfps',$rfps);
			$indus = $model->getvendorindus($user);
			$this->assignRef('indus',$indus);
			$rfps_order = $model->getvendorreviews_order($user);
			$this->assignRef('rfps_order',$rfps_order);
			if($getindustryids)
			if(in_array('56',$getindustryids))
			$PLN_needed = 'yes'; else $PLN_needed = 'no';
			$this->assignRef('PLN_needed',$PLN_needed);
			$first = JRequest::getVar('first','');
			if($first != 'new' && (count($GLI_data)>0 || count($W9_data)>0) )
			$this->setLayout('vendorinfopage');
			else
            $this->setLayout('vendorinfopage');
			parent::display($tpl);
		}
		else if($task == 'vendorpubliclayout') //to display compliance form
		{
			//echo "<pre>"; print_r($_REQUEST); exit;
			$model = $this->getModel('vendors');
			$db = JFactory::getDBO();
			$pid = $_REQUEST['pid'];
			$phoneid = str_replace('/','',$pid);
			$cleaned = preg_replace('/[^[:digit:]]/', '', $phoneid);
			preg_match('/(\d{3})(\d{3})(\d{4})/', $cleaned, $matches);
			$fullnumber = $matches[1].'-'.$matches[2].'-'.$matches[3] ;
			 
			$db = JFactory::getDBO();
			//$user =& JFactory::getUser();
			$userid = "SELECT user_id FROM #__cam_vendor_company  where company_phone='".$fullnumber."'";
			$db->Setquery($userid);
			$user = $db->loadResult();
			$user_subscribe = $model->getsubscribe($user);
			$this->assignRef('subtype',$user_subscribe);
			$GLI_policy_configurations = $model->get_GLI_policy_configurations();
			$this->assignRef('GLI_policy_configurations',$GLI_policy_configurations);
			$liscense_categories = $model->get_liscense_categories();
			$this->assignRef('liscense_categories',$liscense_categories);
			$W9_data = $model->get_compliance_W9_datav($user);
			if(count($W9_data)>0)
			$this->assignRef('W9_data',$W9_data[0]);
			$WCI_data = $model->get_compliance_WCI_datav($user);
			if(count($WCI_data)>0)
			$this->assignRef('WCI_data',$WCI_data);
            $WC_data = $model->get_compliance_WC_datav($user);
			if(count($WC_data)>0)
			$this->assignRef('WC_data',$WC_data);
			$AIP_data = $model->get_compliance_AIP_datav($user);
             if(count($AIP_data)>0)
			$this->assignRef('AIP_data',$AIP_data);
			$GLI_data = $model->get_compliance_GLI_datav($user);
			$this->assignRef('GLI_data',$GLI_data);
			$OLN_data = $model->get_compliance_OLN_datav($user);
			$this->assignRef('OLN_data',$OLN_data);
			$PLN_data = $model->get_compliance_PLN_datav($user);
			$this->assignRef('PLN_data',$PLN_data);
			
			$OMI_data = $model->get_compliance_OMI_datav($user);
			$this->assignRef('OMI_data',$OMI_data);
			
			$states = $model->get_edit_compliance_statesv();
			$this->assignRef('states',$states);
			$OLN_states = $model->get_compliances_OLN_statesv();
			$this->assignRef('OLN_states',$OLN_states);
			$PLN_states = $model->get_compliances_PLN_statesv();
			$this->assignRef('PLN_states',$PLN_states);
			$W9_upld_cert_link = $model->get_W9_upld_cert_linkv();
			$this->assignRef('W9_upld_cert_link',$W9_upld_cert_link);
			$GLI_upld_cert_link = $model->get_GLI_upld_cert_linkv();
			$this->assignRef('GLI_upld_cert_link',$GLI_upld_cert_link);
			$WCI_upld_cert_link = $model->get_WCI_upld_cert_linkv();
			$this->assignRef('WCI_upld_cert_link',$WCI_upld_cert_link);
			$OLN_upld_cert_link = $model->get_OLN_upld_cert_linkv();
			$this->assignRef('OLN_upld_cert_link',$OLN_upld_cert_link);
			$UMB_data = $model->get_compliance_UMB_datav($user);
			$this->assignRef('UMB_data',$UMB_data);
			$PLN_upld_cert_link = $model->get_PLN_upld_cert_linkv();
			$this->assignRef('PLN_upld_cert_link',$PLN_upld_cert_link);
			$ven_data = $model->getvendorinformation($user);
			$this->assignRef('vendata',$ven_data);
			$aboutus = $model->getaboutus($user);
			$this->assignRef('aboutus',$aboutus);
			$indus = $model->getvendorindus($user);
			$this->assignRef('indus',$indus);
			$getindustryids = $model->getindustry_ids($user);
			if($getindustryids)
			if(in_array('56',$getindustryids))
			$PLN_needed = 'yes'; else $PLN_needed = 'no';
			$this->assignRef('PLN_needed',$PLN_needed);
			//$first = JRequest::getVar('first','');
			if($user_subscribe == 'no') {
			//echo "can"; exit;
			$this->setLayout('vendor_info_public_form_fail');
			}
			else{
            $this->setLayout('vendor_info_public_form');
			}
			parent::display($tpl);
		}
		else if($task == 'getuploadpopup'){
		$this->setLayout('logouploadbox');
		parent::display($tpl);
		}
		else if($task == 'marketdocs'){
		$model = $this->getModel('vendors');
		$marketdata = $model->getmarketingfiles();
		$this->assignRef('marketdata',$marketdata);
		$this->setLayout('marketdocs');
		parent::display($tpl);
		}
		else if($task == 'companyrefs'){
		$model = $this->getModel('vendors');
		$companyrefs = $model->getcompanyrefs();
		$this->assignRef('companyrefs',$companyrefs);
		$this->setLayout('companyrefs');
		parent::display($tpl);
		}
		else if($task == 'uploadmarket'){
		$this->setLayout('uploadmarket');
		parent::display($tpl);
		}
		else if($task == 'uploadcompanyrefs'){
		$this->setLayout('uploadcompanyrefs');
		parent::display($tpl);
		}
		else if($task == 'viewfile'){
		$this->setLayout('viewfile');
		parent::display($tpl);
		}
		else if($task == 'viewreffile'){
		$this->setLayout('viewreffile');
		parent::display($tpl);
		}
		else if($task == 'viewfilecomp'){
		$this->setLayout('compviewfile');
		parent::display($tpl);
		}
		else if($task == 'declined')
		{
			$model = $this->getModel('vendors');
			$user = JFactory::getUser();
			$Invitations = $model->get_invitation_jobs();  
			$this->assignRef('Invitations', $Invitations);
			$this->setLayout('declined_projects');
			parent::display($tpl);
		}
		else if($task == 'resetpassword'){
			$this->setLayout('resetpassword');
			parent::display($tpl);
		}
		else if($task == 'showuninitedmsg'){
			$model = $this->getModel('vendors');
			$rfpid = JRequest::getVar('rfpid','');
			$message = $model->getreason_uninvite($rfpid);  
			$this->assignRef('message', $message);
			$this->setLayout('message_uninvited');
			parent::display($tpl);
		}
		else if($task == 'popupinvitations'){
			$model = $this->getModel('vendors');
			$user = JFactory::getUser();
			$Invitations = $model->get_invitation_jobs();  
			$this->assignRef('Invitations', $Invitations);
			$this->setLayout('popupinvitations');
			parent::display($tpl);
		}
		else if($task == 'invitation_pdf'){
			$model = $this->getModel('vendors');
			$rfpid = JRequest::getVar('rfpid','');
			$proposalid = JRequest::getVar('proposalid','');
			$pdfinvitation = $model->getmessagepdf($rfpid, $proposalid);  
			$this->assignRef('pdfinvitation', $pdfinvitation);
			$this->setLayout('invitation_pdf');
			parent::display($tpl);
		}
		else if($task == 'getallindustries') //to display compliance form
		{
			$model = $this->getModel('vendors');
		    $allindustries = $model->getallindustries();
			parent::display($tpl);
			
		}
		else if($task == 'getallcounties') //to display compliance form
		{
			$model = $this->getModel('vendors');
		    $allindustries = $model->getallcountie();
			parent::display($tpl);
			
		}
		
		else //signup process 1
		{
			$model = $this->getModel('vendors');
			$states = $model->getstates();
			$this->assignRef('states',$states);
			$this->setLayout('company_info_form');
			parent::display($tpl);
		}

	}
function generating_pdf($id){
			$_REQUEST['rfp_id'] = $id;
			$model = $this->getModel('vendors');
			$RFPinfo = $model->get_RFPinfo();
			$this->assignRef('RFPinfo', $RFPinfo[0]);
			$BIDinfo = $model->get_Bidamount_info();
			$this->assignRef('BIDinfo', $BIDinfo[0]);
			$BiddedVendorsInfo = $model->get_Bidded_vendors_info();
			$this->assignRef('BiddedVendorsInfo', $BiddedVendorsInfo);
			//for Alt
			$Alt_BiddedVendorsInfo = $model->get_Alt_Bidded_vendors_info();
			$this->assignRef('Alt_BiddedVendorsInfo', $Alt_BiddedVendorsInfo);
			//for second page in pdf
			$TASKS_summary = $model->get_TASKS_summary();
			$this->assignRef('TASKS_summary', $TASKS_summary);
			//for Alt
			$Alt_TASKS_summary = $model->get_Alt_TASKS_summary();
			$this->assignRef('Alt_TASKS_summary', $Alt_TASKS_summary);
			//for Alt
			$Alt_NOTES_summary = $model->get_Alt_NOTES_summary();
			$this->assignRef('Alt_NOTES_summary', $Alt_NOTES_summary);

			$DOCS_summary = $model->get_DOCS_summary();
			$this->assignRef('DOCS_summary', $DOCS_summary);
			//for third page in pdf
			$NOTES_summary = $model->get_NOTES_summary();
			$this->assignRef('NOTES_summary', $NOTES_summary);

			$EXCEPTION_summary = $model->get_EXCEPTION_summary();
			$this->assignRef('EXCEPTION_summary', $EXCEPTION_summary);
			//for Alt
			$Alt_EXCEPTION_summary = $model->get_Alt_EXCEPTION_summary();
			$this->assignRef('Alt_EXCEPTION_summary', $Alt_EXCEPTION_summary);
			//for 4th page in pdf
			$vendors_cnt = $model->get_vendors_cnt();
			$this->assignRef('vendors_cnt', $vendors_cnt);
			$RFP_NOTES_summary = $model->get_rfpcreator_tasks();
			$this->assignRef('RFP_NOTES_summary', $RFP_NOTES_summary);
			//echo "<pre>"; print_r($RFP_NOTES_summary); exit;
			//function to get RFP special Requirements details
			$SPLReq_Category = $model->get_SPLReq_Category();
			$this->assignRef('SPLReq_Category',$SPLReq_Category);

			//function to get RFP special Requirements details
			$SPLRequirements_details = $model->get_SPLRequirements();
			$this->assignRef('SPLRequirements_details',$SPLRequirements_details);

			$Review_reqCatList=$model->get_Review_SplRequiremntCats();
			$this->assignRef('Review_reqCatList',$Review_reqCatList);

			//for third page in pdf
			$COM_docs_summary = $model->get_COM_docs_summary();
			$this->assignRef('COM_docs_summary', $COM_docs_summary);
			$COM_docs_summary_new = $model->get_COM_docs_summary_new();
			$this->assignRef('COM_docs_summary_new', $COM_docs_summary_new);
			//echo "<pre>"; print_r($TASKS_summary); exit;
			$this->setLayout('vendor_proposals_summary');
			//echo "Success";
			parent::display($tpl);
}

}
?>