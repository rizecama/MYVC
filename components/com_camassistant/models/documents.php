<?php
/**
 * @version		1.0.0 cam assistant $
 * @package		cam_assistant
 * @copyright	Copyright Â© 2010 - All rights reserved.
 * @license		GNU/GPL
 * @author		
 * @author mail	nobody@nobody.com
 *
 *
 * @MVC architecture generated by MVC generator tool at http://www.alphaplug.com
 */

defined('_JEXEC') or die('Restricted access');

jimport( 'joomla.application.component.model' );
class camassistantModelDocuments extends Jmodel
{
	function __construct(){
		parent::__construct();

	}
	
///Function to get the properties	
	function getProperty(){
        $property = array(); 
		$db =& JFactory::getDBO();
		$user =& JFactory::getUser();
        $user_id = $user->get('id');
		$query = "SELECT id,property_name FROM #__cam_property where `property_manager_id` =".$user_id." and share=1";

		
		$db->setQuery($query);
        $properties=$db->loadObjectList();
		return $properties;
//Completed		
}
///Function to get the shared propertuy
	function getShareproperty(){
        $shareproperty = array(); 
		$db =& JFactory::getDBO();
		$query = "SELECT id,property_name FROM #__cam_property where share = 0";
		$db->setQuery($query);
        $shareproperties=$db->loadObjectList();
		return $shareproperties;
}
///Completed
}
class documentsModelDocuments extends Jmodel
{
function __construct()
	{
		parent::__construct();
 
        global $mainframe, $option;
		$db =& JFactory::getDBO();
 		$query = "SELECT pagecount FROM #__cam_filetype ";
		$db->setQuery($query);
        $count=$db->loadResult();
        // Get pagination request variables
       // $limit = $mainframe->getUserStateFromRequest('global.list.limit', 'limit', $mainframe->getCfg('list_limit'), 'int');
	   	$limit=$count;
        $limitstart = JRequest::getVar('limitstart', 0, '', 'int');
 		 $limitstart = ($limit != 0 ? (floor($limitstart / $limit) * $limit) : 0);
		 $_REQUEST['viewall'] = 'all';
  		if ($_REQUEST['viewall']=='all'){
	$limit='0';
	$limitstart='0';
	//print_r($limit);
	}
        $this->setState('limit', $limit);
        $this->setState('limitstart', $limitstart);
        // In case limit has been changed, adjust it
       // $limitstart = ($limit != 0 ? (floor($limitstart / $limit) * $limit) : 0);
///////no of fields per page//////////////////
		

///////no of fields per page//////////////////
       // $this->setState('limit', $count);
      //  $this->setState('limitstart', $limitstart);

		
	}
	//code by lalitha on april 07th
	function getvendordocs(){
        $pfiles = array(); 
		$db =& JFactory::getDBO();
		$user =& JFactory::getUser();
        $user_id = $user->get('id');
		/*$query = "SELECT * FROM #__cam_propertydocs where parent=0 and `property_manager_id` =".$user_id." and `property_id` =".$_REQUEST['pid']; */
		$query = "SELECT * FROM #__cam_propertydocs where parent =0 AND  `property_manager_id`  =".$user_id;
		$db->setQuery($query);
        $pfiles=$db->loadObjectList();
		return $pfiles;
	}
	function getvendortaxid(){
        $pfiles = array(); 
		$db =& JFactory::getDBO();
		$user =& JFactory::getUser();
        $user_id = $user->get('id');
		/*$query = "SELECT * FROM #__cam_propertydocs where parent=0 and `property_manager_id` =".$user_id." and `property_id` =".$_REQUEST['pid']; */
		$query = "SELECT tax_id FROM #__cam_vendor_company where `user_id`  =".$user_id;
		$db->setQuery($query);
        $taxid=$db->loadObjectList();
		
		return $taxid;
	}
	function getcamfirmid(){
        $pfiles = array(); 
		$db =& JFactory::getDBO();
		$user =& JFactory::getUser();
        $user_id = $user->get('id');
		
		$query = "SELECT camfirm_license_no,comp_name FROM #__cam_customer_companyinfo WHERE cust_id=".$user_id;
		$db->setQuery($query);
		$camfirmid = $db->loadObjectList();
		return $camfirmid;
	
	}
	//code by lalitha on april 07th
	
function _buildQuery1(){
	
global $mainframe;
       /* $pdocs = array(); 
		$db =& JFactory::getDBO();
        $user =& JFactory::getUser();
        $user_id = $user->get('id');
		$que = "SELECT id FROM #__cam_camfirminfo where `cust_id` =".$user_id;
		$db->setQuery($que);
		$comp_id=$db->loadObjectList(); 
		$comp_id = $comp_id[0]->id;
		if($comp_id != 0)
		{
        $query = "SELECT id,property_name,tax_id FROM #__cam_property where `company_id` =".$comp_id." and `property_manager_id` =".$user_id." and share=0 ";
		} else {
		$query = "SELECT id,property_name,property_manager_id,tax_id FROM #__cam_property where `property_manager_id` =".$user_id." and share=0";
		}
		return $query;*/
	$pdocs = array(); 
	$user =& JFactory::getUser();
	$user_id = $user->get('id');
	$db=&JFactory::getDBO();
	$cid = $_REQUEST['cid'];
	if($cid){
//	echo $cid; echo "In if"; exit;
	$user_id = $cid;
	}
	else {
	$user_id = $user_id;
	}
	$query = "SELECT id FROM #__cam_camfirminfo WHERE cust_id=".$user_id;
	$db->setQuery($query);
	$comp_id = $db->loadResult();
	if(!$comp_id)
	{
		$query = "SELECT comp_id FROM #__cam_customer_companyinfo WHERE cust_id=".$user_id;
		$db->setQuery($query);
		$comp_id = $db->loadResult();
	}
	$usertype = $user->get('user_type');
	$query = "SELECT U.id ,U.property_name, U.property_manager_id, U.tax_id  FROM #__cam_property as U, #__users as V where U.publish='0' and U.`property_manager_id` = V.`id`  AND company_id=".$comp_id;
	if($usertype != '13' || $cid)
	$query .= " AND U.`property_manager_id` =".$user_id;
	$query .= " ORDER BY U.id DESC";

///For the district manager
	if($user->dmanager == 'yes'){
	$query_managers = "SELECT managerid FROM #__cam_invitemanagers WHERE dmanager=".$user_id;
	$db->setQuery($query_managers);
	$standard_managers = $db->loadObjectList();
		$where  = 'property_manager_id='.$user_id;
		for($s=0; $s<count($standard_managers);$s++){
		$where = $where." OR property_manager_id='".$standard_managers[$s]->managerid."' ";
		$where = str_replace('OR OR','OR',$where);
		}
 	$query = "SELECT U.id ,U.property_name, U.property_manager_id, U.tax_id, V.dmanager  FROM #__cam_property as U, #__users as V where U.publish='0' and U.`property_manager_id` = V.`id` AND (".$where.") ";
	}
	
	if($user->user_type == '13' && $user->accounttype == 'master'){
	$managers = $this->getmanagers_master();
	$whereas[] = "U.property_manager_id IN (".implode( ' , ' , $managers).") ";
	
	$query = "SELECT U.id ,U.property_name, U.property_manager_id, U.tax_id, V.dmanager  FROM #__cam_property as U, #__users as V where U.publish='0' and U.`property_manager_id` = V.`id` 
	AND ".implode( $whereas )." ";
	}
	if($user->user_type == '16' ){
	$pid = $this->getallproperties();
	$pids = implode(',',$pid);
		
		
	$whereas[] = 'U.id IN ('.$pids.') ';
	$query = "SELECT U.id ,U.property_name, U.property_manager_id, U.tax_id, V.dmanager  FROM #__cam_property as U, #__users as V where U.publish='0' and U.`propertyowner_manage` = V.`id` 
	AND ".implode( $whereas )." ";
	}
	//echo $query;
	//COMPLETED
	
		return $query;
}

function getallproperties(){

	$db = JFactory::getDBO();
	$user = JFactory::getUser();
	$sql1 = "SELECT id from #__cam_property where 	propertyowner_manage=".$user->id." ";
	$db->Setquery($sql1);
    $subfirms = $db->loadObjectlist();
    
    foreach($subfirms as $id ){
		$propertyid[] = $id->id;
	}
    return $propertyid;
    
}
	
	
	
	function getmanagers_master(){
		
	$db = JFactory::getDBO();
	$user = JFactory::getUser();
	$sql1 = "SELECT firmid from #__cam_masteraccounts where masterid=".$user->id." ";
	$db->Setquery($sql1);
	$subfirms = $db->loadObjectlist();
	
	//echo "<pre>"; print_r($subfirms); echo "</pre>";
	if($subfirms)
	{
			for( $a=0; $a<count($subfirms); $a++ )
		{
			$firmid1[] = $subfirms[$a]->firmid;
			$sql = "SELECT id from #__cam_camfirminfo where cust_id=".$subfirms[$a]->firmid." ";
			$db->Setquery($sql);
			$companyid[] = $db->loadResult();
		}
	}
	
	if($companyid)
	{
		for( $c=0; $c<count($companyid); $c++ )
		{
			$sql_cid = "SELECT cust_id from #__cam_customer_companyinfo where comp_id=".$companyid[$c]." ";
			$db->Setquery($sql_cid);
			$managerids = $db->loadObjectList();
				if($managerids) 
				{
					foreach( $managerids as $last_mans)
					{
						$total_mangrs[] = $last_mans->cust_id ;
					}
				}
		}
	}
	
	if($firmid1 && $total_mangrs )
	{
		$total_mangrs = array_merge($total_mangrs,$firmid1); 
	}
	
	$userid=array($user->id);
	if($total_mangrs){
		$totalcust_id1 = array_merge($userid,$total_mangrs); 
	}
	else{
		$totalcust_id1[] = $user->id; 
	}
	
	return $totalcust_id1; 
		
	}

function getPagination1()
	{
	// Lets load the content if it doesn't already exist
		if (empty($this->_pagination))
		{
			jimport('joomla.html.pagination');
$this->_pagination = new JPagination( $this->getTotal1(), $this->getState('limitstart'), $this->getState('limit') );

}

		return $this->_pagination;
	}
  
	function getTotal1()
	{
		//DEVNOTE: Lets load the content if it doesn't already exist
		if (empty($this->_total))
		{
			$query = $this->_buildQuery1();
			$this->_total = $this->_getListCount($query); 
		}
		return $this->_total;
	}

	function getData1()
	{

		//DEVNOTE: Lets load the content if it doesn't already exist
		if (empty($this->_data))
		{
			 $query = $this->_buildQuery1();
			$this->_data = $this->_getList($query, $this->getState('limitstart'), $this->getState('limit'));
		}

		return $this->_data;
}

	function _buildContentOrderBy1()
	{
			global $mainframe, $context;

	 $filter_order     = $mainframe->getUserStateFromRequest( $context.'filter_order',      'filter_order',  'hotelname' );

		if(empty($filter_order))
		{
		$filter_order = 'hotelname';
		}
		else
		{
		$filter_order = $filter_order;
		}
		$filter_order_Dir = $mainframe->getUserStateFromRequest( $context.'filter_order_Dir',  'filter_order_Dir','');		
		//DEVNOTE: all countries are in the same category(no category)  

		$orderby 	= ' ORDER BY '. $filter_order .' '. $filter_order_Dir;
		return $orderby;

	}
	
///Function to get the files and folders from the property name
function getpfiles(){
        $pfiles = array(); 
		$db =& JFactory::getDBO();
		$user =& JFactory::getUser();
        $user_id = $user->get('id');
		//$query = "SELECT * FROM #__cam_propertydocs where parent=0 and `property_manager_id` =".$user_id." and `property_id` =".$_REQUEST['pid']; 
		$query = "SELECT * FROM #__cam_propertydocs where parent=0 and  `property_id` =".$_REQUEST['pid']; 
		$db->setQuery($query);
        $pfiles=$db->loadObjectList();

		return $pfiles;
}
//Completd
///Function to checking the file extensions
function getfileextensions(){
        $lfiles = array(); 
		$db =& JFactory::getDBO();
		$query = "SELECT files FROM #__cam_filetype";
		$db->setQuery($query);
    	$lfiles=$db->loadObjectList();
		return $lfiles;
}
//Completed
function store($data){
        // get the table
JTable::addIncludePath(JPATH_COMPONENT.DS.'tables');
$row =& $this->getTable('propertydocs');
$row = JTable::getInstance('propertydocs','Table');
        if (!$row->bind($data)) {
                $this->setError($this->_db->getErrorMsg());
                return false;
        }
        if (!$row->check()) {
                $this->setError($this->_db->getErrorMsg());
                return false;
        }
        if (!$row->store()) {

                $this->setError( $row->getErrorMsg() );
                return false;
        }
        return true;         
}
function store1($data){
        // get the table
JTable::addIncludePath(JPATH_COMPONENT.DS.'tables');
$row =& $this->getTable('pdocuments');
$row = JTable::getInstance('pdocuments','Table');
        // Bind the form fields to the invite table
        if (!$row->bind($data)) {
                $this->setError($this->_db->getErrorMsg());
                return false;
        }
        // Make sure the hello record is valid
        if (!$row->check()) {
                $this->setError($this->_db->getErrorMsg());
                return false;
        }
        // Store the web link table to the database
        if (!$row->store()) {
                $this->setError( $row->getErrorMsg() );
                return false;
        }
 
        return true;         
}

function store3($data){
	
JTable::addIncludePath(JPATH_COMPONENT.DS.'tables');
$row =& $this->getTable('propertydocs');
$row = JTable::getInstance('propertydocs','Table');
        if (!$row->bind($data)) {
                $this->setError($this->_db->getErrorMsg());
                return false;
        }
        if (!$row->check()) {
                $this->setError($this->_db->getErrorMsg());
                return false;
        }
        if (!$row->store()) {
                $this->setError($row->getErrorMsg());
                return false;
        }
        return true;
}
function getcategories(){
    $cats = array();
	$db =& JFactory::getDBO();
    $user =& JFactory::getUser();
    $user_id = $user->get('id');
	$query = "SELECT id,property_name FROM #__cam_property where `property_manager_id`=".$user_id." and `show`=1 and `share`=1 ";
	$db->setQuery($query);
    $cats=$db->loadObjectList();
	return $cats;
}
function getopenfiles($path){
$dir=dir($path);
while($filename=$dir->read()) {
if($filename!='.'&&$filename!='..')
{
if(strpos($filename,"."))
$data['files'][]=$filename;
else
$data['folders'][]= $filename;
}
}
$dir->close();
return $data;
}
function getcheck(){
	$db =& JFactory::getDBO();
	$query = "SELECT files FROM #__cam_filetype";
	$db->setQuery($query);
    $files=$db->loadResult();
   
	$sfiles = split(',', $files);
	$ext = explode('.', $_FILES['file']['name']);
	
foreach($ext as $ex){
$extion=$ex;
} 
if (in_array($extion,$sfiles))
  {
 return true;
  }
else
  { 
  //echo "Sorry!  The file type you attempted to upload is not allowed.  Please try again and note the allowed file types and extensions.<br>
//If you continue to have problems or need help, please contact the CAMassistant Customer Support Team at 561-246-3830.";
//  exit;
  }
}

//function to get open files modifled by sateesh on 27-07-11
	function getopen()
	{
//	echo "<pre>"; print_r($_REQUEST); exit;
		$filename = JRequest::getVar('doc_title','');
		$file_shared = JRequest::getVar('propertyname','');
		$path = JRequest::getVar('path','');	
		$spath = JRequest::getVar('spath','');		
		if($spath ==''){
		$lastpath = $path;
		} else {$lastpath = $spath; } 
		if($filename == ''){
		$filename = $file_shared;
		}
		$path = JURI::root().$lastpath; 
		$last = substr($path, -1);
		$path = str_replace($filename,'',$path);
		if($last == '/'){
		$doc_name = $path.$filename;
		}
		else{
		$doc_name = $path."/".$filename;
		}

		//echo $doc_name; exit;
		header("content-type: application/octet-stream");		
		header("Content-Disposition: attachment; filename=".$filename);
		readfile($doc_name);
		exit;
	}
//function to get open files modifled by sateesh on 27-07-11 completed
function _buildQuery()
	{
		 $sdocs = array(); 
		 $db =& JFactory::getDBO();
		 $user =& JFactory::getUser();
		 $usertype = $user->user_type;
         $user_id = $user->get('id');
		/* $query = "SELECT id FROM #__cam_camfirminfo WHERE cust_id=".$user_id;
		 $db->setQuery($query);
		 $id = $db->loadResult();*/
		 $query = "SELECT comp_id FROM #__cam_customer_companyinfo WHERE cust_id=".$user_id;
	 	 $db->setQuery($query);
		 $custmors = $db->loadResult();
		$query = "SELECT cust_id FROM #__cam_camfirminfo WHERE id=".$custmors;
		 $db->setQuery($query);
		 $id = $db->loadResult();

		 if($usertype == 13){
		$query = "SELECT property_id,sdocTitle,property_manager_id,parent_manager FROM #__cam_propertydocs where parent=0 AND (`property_manager_id` =".$user_id." OR parent_manager=".$user_id.") and type='shared'";
		 }
		else if($usertype == 16){
		 $query = "SELECT property_id,sdocTitle,property_manager_id,parent_manager FROM #__cam_propertydocs where parent=0 AND  `property_manager_id` =".$user_id." and type='shared'";
		 } 
		else{
		$query = "SELECT property_id,sdocTitle,property_manager_id,parent_manager FROM #__cam_propertydocs where parent=0 AND `property_manager_id` =".$id." OR `property_manager_id` =".$user_id." and type='shared'";
		 }
		 
		 return $query;
	}
	//Function to add the shared documents by sateesh on 22-07-11 completed	
function getPagination()
	{
		if (empty($this->_pagination))
		{
			jimport('joomla.html.pagination');
			$this->_pagination = new JPagination( $this->getTotal(), $this->getState('limitstart'), $this->getState('limit') );
	}
		return $this->_pagination;
	}
  
	function getTotal()
	{
		if (empty($this->_total))
		{
			$query = $this->_buildQuery();
			$this->_total = $this->_getListCount($query);
		}
		return $this->_total;
	}
	function getData()
	{
			$query = $this->_buildQuery();
			$this->_data = $this->_getList($query, $this->getState('limitstart'), $this->getState('limit'));
			return $this->_data;
	}
	function _buildContentOrderBy()
	{
		global $mainframe, $context;
	 	$filter_order     = $mainframe->getUserStateFromRequest( $context.'filter_order',      'filter_order',  'hotelname' );
		if(empty($filter_order))
		{
		$filter_order = 'hotelname';
		}
		else
		{
		$filter_order = $filter_order;
		}
		$filter_order_Dir = $mainframe->getUserStateFromRequest( $context.'filter_order_Dir',  'filter_order_Dir','');		
		$orderby 	= ' ORDER BY '. $filter_order .' '. $filter_order_Dir;
		return $orderby;
	}

function getsfiles(){

        $sfiles = array(); 
		$db =& JFactory::getDBO();
		$user =& JFactory::getUser();
        $user_id = $user->get('id');
		$post = JRequest::get('post');
		$shared = JRequest::getVar( 'type','');
		if($shared == 'shared'){
		$query = "SELECT * FROM #__cam_propertydocs where type='shared' and parent=0 and `property_manager_id` =".$user_id."";
		}else {
		$query = "SELECT * FROM #__cam_propertydocs where `parent`=0 and `property_manager_id` =".$user_id." and `property_id` =".$_REQUEST['spid'];
		}
		$db->setQuery($query);
        $sfiles=$db->loadObjectList();
		return $sfiles;
}
function getscategories(){
        $acats = array(); 
		$db =& JFactory::getDBO();
		$user =& JFactory::getUser();
        $user_id = $user->get('id');
		$query = "SELECT id,property_name FROM #__cam_property where `property_manager_id` =".$user_id." and `show`=1 and `share`=0 ";
		$db->setQuery($query);
        $scats=$db->loadObjectList();
		return $scats;
}
function sstore($data){
JTable::addIncludePath(JPATH_COMPONENT.DS.'tables');
$row =& $this->getTable('propertydocs');
$row = JTable::getInstance('propertydocs','Table');
        if (!$row->bind($data)) {
                $this->setError($this->_db->getErrorMsg());
                return false;
        }
        if (!$row->check()) {
                $this->setError($this->_db->getErrorMsg());
                return false;
        }
        if (!$row->store()) {
                $this->setError( $row->getErrorMsg() );
                return false;
        }
        return true;
}
function sstore3($data){
JTable::addIncludePath(JPATH_COMPONENT.DS.'tables');
$row =& $this->getTable('propertydocs');
$row = JTable::getInstance('propertydocs','Table');
        if (!$row->bind($data)) {
                $this->setError($this->_db->getErrorMsg());
                return false;
        }
        if (!$row->check()) {
                $this->setError($this->_db->getErrorMsg());
                return false;
        }
        if (!$row->store()) {
                $this->setError($row->getErrorMsg());
                return false;
        }
        return true;
}
function getsopenfiles($spath){
//echo "<pre>"; print_r($_REQUEST); exit;
$sdir=dir($spath);
while($filename=$sdir->read()) {
if($filename!='.'&&$filename!='..')
{
if(strpos($filename,"."))
$data['files'][]=$filename;
else
$data['folders'][]= $filename;
}
}
$sdir->close();

return $data;
}

//code added by lalitha
function getvendor_delete()
{
$spid = JRequest::getVar( 'spid','' );	
$title = JRequest::getVar( 'title','' );	
$smid = JRequest::getVar( 'smid','' );	
$spath = JRequest::getVar( 'spath','' );	
$doc_title = JRequest::getVar( 'doc_title','' );	
if($title == ''){
$title = $doc_title;
}
else { 
$title = $title;
}
$db =& JFactory::getDBO();
$user =& JFactory::getUser();
$usertype = $user->get('user_type');
//print_r($usertype); exit;
if($usertype == '11'){
		$query = "DELETE FROM #__cam_propertydocs  WHERE property_manager_id =".$smid." AND property_id=".$spid." AND docTitle='".$title."'";  
$db->setQuery($query); 
$result = $db->query();
if($result){
$path = $spath;


        if (!$path) {
                // Bad programmer! Bad Bad programmer!
                JError::raiseWarning(500, 'JFolder::delete: ' . JText::_('Attempt to delete base directory') );
                return false;
        }
 
        // Initialize variables
        jimport('joomla.client.helper');
        $ftpOptions = JClientHelper::getCredentials('ftp');
 
        // Check to make sure the path valid and clean
         $path = JPath::clean($path); 
 
        // Is this really a folder?
        if (!is_dir($path)) {
                JError::raiseWarning(21, 'JFolder::delete: ' . JText::_('Path is not a folder'), 'Path: ' . $path);
                return false;
        }
 
        // Remove all the files in folder if they exist
        $files = JFolder::files($path, '.', false, true, array());
        if (!empty($files)) {
                jimport('joomla.filesystem.file');
                if (JFile::delete($files) !== true) {
                        // JFile::delete throws an error
                        return false;
                }
        }
 
        // Remove sub-folders of folder
        $folders = JFolder::folders($path, '.', false, true, array());
        foreach ($folders as $folder) {
                if (is_link($folder)) {
                        // Don't descend into linked directories, just delete the link.
                        jimport('joomla.filesystem.file');
                        if (JFile::delete($folder) !== true) {
                                // JFile::delete throws an error
                                return false;
                        }
                } elseif (JFolder::delete($folder) !== true) {
                        // JFolder::delete throws an error
                        return false;
                }
        }
 
        if ($ftpOptions['enabled'] == 1) {
                // Connect the FTP client
                jimport('joomla.client.ftp');
                $ftp = &JFTP::getInstance(
                        $ftpOptions['host'], $ftpOptions['port'], null,
                        $ftpOptions['user'], $ftpOptions['pass']
                );
        }
 
        // In case of restricted permissions we zap it one way or the other
        // as long as the owner is either the webserver or the ftp
        if (@rmdir($path)) {
                $ret = true;
        } elseif ($ftpOptions['enabled'] == 1) {
                // Translate path and delete
                $path = JPath::clean(str_replace(JPATH_ROOT, $ftpOptions['root'], $path), '/');
                // FTP connector throws an error
                $ret = $ftp->delete($path);
        } else {
                JError::raiseWarning(
                        'SOME_ERROR_CODE',
                        'JFolder::delete: ' . JText::_('Could not delete folder'),
                        'Path: ' . $path
                );
                $ret = false;
        }
//        return $ret;

/*jimport('joomla.filesystem.file');
$files = JFolder::files( $dir_delete, '.', true, true );
				foreach( $files as $file )
	$result = 	JFile::delete( $file );
*/

   if ($ret) {
         echo "Directory deleted successfully.", "\n";
   }else {
        echo "Could not delete the directory.", "\n";
   }   }
}
else {
echo "You have no permission to delete the files"; 

 }
}

// Vendor 08-04-11
function getvendor_deletefile(){
//echo "<pre>"; print_r($_REQUEST); exit;
 // Initialize variables
// echo "file deleting"; exit;
$spid = JRequest::getVar( 'spid','' );	
$title = JRequest::getVar( 'title','' );	
$smid = JRequest::getVar( 'smid','' );	
$file = JRequest::getVar( 'spath','' );	
$second = JRequest::getVar( 'second','' );	
$doc_title = JRequest::getVar( 'doc_title','' );	
if($title == ''){
$title = $doc_title;
} 
else{ 
$title = $title ;
}
//echo $second; exit;
//$file = $file."/".$title;
//echo $file; exit;
if($second=='second'){
$file = $file."/".$title;
}
else {
$file = $file;
}
$db =& JFactory::getDBO();
$user =& JFactory::getUser();
$usertype = $user->get('user_type');

if($usertype == '11'){
$query = "DELETE FROM #__cam_propertydocs  WHERE property_manager_id =".$smid." AND property_id=".$spid." AND docTitle='".$title."'";  
$db->setQuery($query); 
$result = $db->query();
if($result){


        jimport('joomla.client.helper');
        $FTPOptions = JClientHelper::getCredentials('ftp');
 
        if (is_array($file)) {
                $files = $file;
        } else {
                $files[] = $file;
        }
 
        // Do NOT use ftp if it is not enabled
        if ($FTPOptions['enabled'] == 1)
        {
                // Connect the FTP client
                jimport('joomla.client.ftp');
                $ftp = & JFTP::getInstance($FTPOptions['host'], $FTPOptions['port'], null, $FTPOptions['user'], $FTPOptions['pass']);
        }
 
        foreach ($files as $file)
        {
                $file = JPath::clean($file);
 
                // Try making the file writeable first. If it's read-only, it can't be deleted
                // on Windows, even if the parent folder is writeable
                @chmod($file, 0777);
 
                // In case of restricted permissions we zap it one way or the other
                // as long as the owner is either the webserver or the ftp
                if (@unlink($file)) {
                        // Do nothing
                } elseif ($FTPOptions['enabled'] == 1) {
                        $file = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $file), '/');
                        if (!$ftp->delete($file)) {
                                // FTP connector throws an error
                                return false;
                        }
                } else {
                        $filename       = basename($file);
                        JError::raiseWarning('SOME_ERROR_CODE', JText::_('Delete failed') . ": '$filename'");
                        return false;
                }
        }
 
        return true;

}
}
}

// Vendor 08-04-11 Completed

//end of code added by lalitha
function getdelete(){


$spid = JRequest::getVar( 'spid','' );	
if(!spid){
$spid='';
}
$title = JRequest::getVar( 'doc_title','' );	
$smid = JRequest::getVar( 'smid','' );	
$spath = JRequest::getVar( 'spath','' );	 
$db =& JFactory::getDBO();
$user =& JFactory::getUser();
$usertype = $user->get('user_type');
//print_r($usertype); exit;
if($usertype == '13' || $usertype == '12'){
$query = "DELETE FROM #__cam_propertydocs  WHERE property_manager_id =".$smid." AND sdocTitle='".$title."'";  

$db->setQuery($query); 
$result = $db->query();
if($result){
$path = $spath;
        if (!$path) {
                // Bad programmer! Bad Bad programmer!
                JError::raiseWarning(500, 'JFolder::delete: ' . JText::_('Attempt to delete base directory') );
                return false;
        }
 
        // Initialize variables
        jimport('joomla.client.helper');
        $ftpOptions = JClientHelper::getCredentials('ftp');
 
        // Check to make sure the path valid and clean
        $path = JPath::clean($path);
 
        // Is this really a folder?
        if (!is_dir($path)) {
                JError::raiseWarning(21, 'JFolder::delete: ' . JText::_('Path is not a folder'), 'Path: ' . $path);
                return false;
        }
 
        // Remove all the files in folder if they exist
        $files = JFolder::files($path, '.', false, true, array());
        if (!empty($files)) {
                jimport('joomla.filesystem.file');
                if (JFile::delete($files) !== true) {
                        // JFile::delete throws an error
                        return false;
                }
        }
 
        // Remove sub-folders of folder
        $folders = JFolder::folders($path, '.', false, true, array());
        foreach ($folders as $folder) {
                if (is_link($folder)) {
                        // Don't descend into linked directories, just delete the link.
                        jimport('joomla.filesystem.file');
                        if (JFile::delete($folder) !== true) {
                                // JFile::delete throws an error
                                return false;
                        }
                } elseif (JFolder::delete($folder) !== true) {
                        // JFolder::delete throws an error
                        return false;
                }
        }
 
        if ($ftpOptions['enabled'] == 1) {
                // Connect the FTP client
                jimport('joomla.client.ftp');
                $ftp = &JFTP::getInstance(
                        $ftpOptions['host'], $ftpOptions['port'], null,
                        $ftpOptions['user'], $ftpOptions['pass']
                );
        }
 
        // In case of restricted permissions we zap it one way or the other
        // as long as the owner is either the webserver or the ftp
        if (@rmdir($path)) {
                $ret = true;
        } elseif ($ftpOptions['enabled'] == 1) {
                // Translate path and delete
                $path = JPath::clean(str_replace(JPATH_ROOT, $ftpOptions['root'], $path), '/');
                // FTP connector throws an error
                $ret = $ftp->delete($path);
        } else {
                JError::raiseWarning(
                        'SOME_ERROR_CODE',
                        'JFolder::delete: ' . JText::_('Could not delete folder'),
                        'Path: ' . $path
                );
                $ret = false;
        }
//        return $ret;

/*jimport('joomla.filesystem.file');
$files = JFolder::files( $dir_delete, '.', true, true );
				foreach( $files as $file )
	$result = 	JFile::delete( $file );
*/

   if ($ret) {
         echo "Directory deleted successfully.", "\n";
   }else {
        echo "Could not delete the directory.", "\n";
   }   }
}
else {
echo "You have no permission to delete the files";
 }
}
function getdeletefile(){
//echo "<pre>"; print_r($_REQUEST); exit;
$spid = JRequest::getVar( 'spid','' );	
$title = JRequest::getVar( 'doc_title','' );	
$smid = JRequest::getVar( 'smid','' );	
$file = JRequest::getVar( 'spath','' );	
$db =& JFactory::getDBO();
$user =& JFactory::getUser();
$usertype = $user->get('user_type');

if($usertype == '13' || $usertype == '12'){
 $query = "DELETE FROM #__cam_propertydocs  WHERE property_manager_id =".$smid." AND sdocTitle='".$title."'";  
//exit;
$db->setQuery($query); 
$result = $db->query();
if($result){
        jimport('joomla.client.helper');
        $FTPOptions = JClientHelper::getCredentials('ftp');
 
        if (is_array($file)) {
                $files = $file;
        } else {
                $files[] = $file;
        }
 
        // Do NOT use ftp if it is not enabled
        if ($FTPOptions['enabled'] == 1)
        {
                // Connect the FTP client
                jimport('joomla.client.ftp');
                $ftp = & JFTP::getInstance($FTPOptions['host'], $FTPOptions['port'], null, $FTPOptions['user'], $FTPOptions['pass']);
        }
 
        foreach ($files as $file)
        {
                $file = JPath::clean($file);
 
                // Try making the file writeable first. If it's read-only, it can't be deleted
                // on Windows, even if the parent folder is writeable
                @chmod($file, 0777);
 
                // In case of restricted permissions we zap it one way or the other
                // as long as the owner is either the webserver or the ftp
                if (@unlink($file)) {
                        // Do nothing
                } elseif ($FTPOptions['enabled'] == 1) {
                        $file = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $file), '/');
                        if (!$ftp->delete($file)) {
                                // FTP connector throws an error
                                return false;
                        }
                } else {
                        $filename       = basename($file);
                        JError::raiseWarning('SOME_ERROR_CODE', JText::_('Delete failed') . ": '$filename'");
                        return false;
                }
        }
 
        return true;

}
}
}


/////////////////////////////////////////////Shared documents Completed ///////////////////////////////




}
?>
